\part{introduction}

\rawpicture{small-loire.png}{la Loire, métaphore de la continuation?}{photo de l'auteur}{r}

\begin{note}{Note}
Ce qui suit provient pour l'essentiel de l'article de Wikipedia, \cite{wikienCPS} (en anglais): \href{https://en.wikipedia.org/wiki/Continuation-passing_style}{Continuation-passing style}.
\end{note}

\section{un premier test et quelques définitions}
Commençons donc par les définitions essentielles:

\begin{termdefinition}{CPS}
Le \emph{continuation-passing style} ou \textbf{CPS} est un style de programmation où le contrôle est passé explicitement sous forme de continuation.
\end{termdefinition}

C'est ce style que nous allons présenter dans les pages qui suivent. En attendant, voyons ce qu'est une continuation :

\begin{termdefinition}{continuation}
Une continuation d'un programme est \emph{la suite des instructions qu'il lui reste à exécuter à un moment précis}\footnote{\emph{Cf.}
\cite{wikifrcontinuations}.}
\end{termdefinition}

Voici un exemple montrant la différence entre le style direct:
<<distance direct style>>=
(define (distance x y)
 (sqrt (+ (* x x) (* y y))))
@ %def distance

Et le CPS:
<<distance CPS>>=
(define (distance-cps x y k)
 (*-cps x x (lambda (x2)
          (*-cps y y (lambda (y2)
                   (+-cps x2 y2 (lambda (x2py2)
                              (sqrt-cps x2py2 k))))))))
@ %def distance-cps

Pour la définition des fonctions utilisées en CPS :
<<cps function definition>>=
(define (cps-prim f)
 (lambda args
  (let ((r (reverse args)))
   ((car r) (apply f
             (reverse (cdr r)))))))
(define *-cps (cps-prim *))
(define +-cps (cps-prim +))
(define sqrt-cps (cps-prim sqrt))
@ %def cps-prim, *-cps, +-cps, sqrt-cps

Testons:
<<first-cps-test.scm>>=
;; first-cps-test

<<tools for scheme>>
<<cps function definition>>
<<distance CPS>>
<<distance direct style>>

(define test
  (lambda(x y)
    (myprint "x=" x " y=" y)
    (myprint " direct=" (distance x y))
    (distance-cps x y (lambda(e) (myprint " cps=" e "\n")))))

(test 3 4)
(test 0 3)
(test 3 0)
@
Ce code doit nous renvoyer ce résultat:
<<resultat first cps test>>=
$ gosh first-cps-test.scm
x=3 y=4 direct=5 cps=5
x=0 y=3 direct=3 cps=3
x=3 y=0 direct=3 cps=3
@

\section{du code plus intéressant}
Notre continuation un peu simpliste permet de mieux appréhender l'essentiel du problème. Voyons ce qui peut-être plus constructif et utile comme les échappements.

Voici un exemple calculant le produit des éléments d'une liste en style direct:
<<list product>>=
(define direct-product-1
  (lambda(L)
    (if (null? L)
      1
      (* (car L) (direct-product-1 (cdr L))))))
@ %def direct-product-1
On peut raccourcir les calculs si $0$ est présent dans la liste:
<<list product>>=
(define direct-product-2
  (lambda(L)
    (cond
      ((null? L) 1)
      ((zero? (car L)) 0)
      (else (* (car L) (direct-product-2 (cdr L)))))))
@ %def direct-product-2
Maintenant, passons en CPS\footnote{La méthode d'obtention dans ~\cite{chazarain96}}:
<<list product>>=
(define cps-product
  (lambda(L k)
    (cond
      ((null? L) (k 1))
      ((zero? (car L)) (k 0))
      (else (cps-product (cdr L) (lambda(p-cdr) (k (* p-cdr (car L))))))
      )
  ))
@ %def cps-product

L'utilisation de \texttt{cps-product} est en fait simple, il suffit d'utiliser la fonction identité:
<<list product test>>=
(cps-product '(12 6 0 35 42) (lambda(n) n))
@

Pour les continuations vérifiant:
\begin{equation}
   k(0) = 0
\end{equation}
on peut définir un \texttt{cps-product-0}:
<<list product>>=
(define cps-product-0
  (lambda(L k)
    (cond
      ((null? L) (k 1))
      ((zero? (car L)) 0)
      (else (cps-product-0 (cdr L) (lambda(p-cdr) (k (* p-cdr (car L))))))
      )
  ))
@ %def cps-product-0

Ici, l'avantage de la continuation est plus évident. Si nous voulons obtenir la somme de carré des éléments de la liste, on réécrit le précédent exemple ainsi :
<<list product test>>=
;; avec les carré :
(cps-product '(12 6 0 35 42) (lambda(n) (* n n)))
@

Bien qu'il soit dit en de nombreux ouvrages que la CPS pouvait rendre le code très difficile à écrire, lire et entretenir, on voit bien qu'ici on obtient une ouverture intéressante sur des possibilités inattendues comme une gestion d'erreur.
